# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on Windows

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  prepare-vcpkg:
    runs-on: windows-latest
    steps:
      - name: Restore vcpkg cache
        id: cache-windows-vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\buildtrees
          key: windows-vcpkg-v1

      - name: Install dependencies with vcpkg
        if: steps.cache-windows-vcpkg.outputs.cache-hit != 'true'
        run: |
          C:\vcpkg\vcpkg.exe install boost-serialization boost-system boost-filesystem boost-program-options boost-thread boost-asio gtest

  build:
    needs: [ "prepare-vcpkg" ]
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug ]

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false

      - name: Restore vcpkg cache
        id: cache-windows-vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\buildtrees
          key: windows-vcpkg-v1
          fail-on-cache-miss: true

      - name: Install dependencies with vcpkg
        if: steps.cache-windows-vcpkg.outputs.cache-hit != 'true'
        run: |
          C:\vcpkg\vcpkg.exe install boost-serialization boost-system boost-filesystem boost-program-options boost-thread boost-asio gtest

      - name: Install dependencies with MSYS2
        run: |
          C:\msys64\usr\bin\pacman.exe -S --noconfirm mingw-w64-x86_64-pkg-config

      - name: Prepare container(onnxruntime)
        shell: bash
        run: |
          ./.github/actions/download-onnxruntime-windows.sh

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DPKG_CONFIG_EXECUTABLE:FILEPATH=C:/msys64/mingw64/bin/pkg-config.exe
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_FEATURE_FLAGS=binarycaching
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 4

      - name: Cache test fixtures
        id: cache-test-fixtures
        uses: actions/cache@v4
        with:
          path: test/fixture
          key: test-fixtures-v1

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --extra-verbose --build-config ${{ matrix.build_type }}
